# OpenRQM Docs
# Installs node.js and the required tools to generate PDFs from the Markdown documentation.
# Downloads the swagger codegen and generates the spring boot server and dart client stubs

trigger:
- master
- development

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

# install & prepare the Dart SDK for publishing to pub
- script: |
    sudo apt-get update
    sudo apt-get install apt-transport-https
    sudo sh -c 'curl https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
    sudo sh -c 'curl https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'
    sudo apt-get update
    sudo apt-get install dart
  displayName: 'Prepare Dart SDK'

# install the OpenAPI-codegen
- script: |
    wget http://central.maven.org/maven2/org/openapitools/openapi-generator-cli/4.1.2/openapi-generator-cli-4.1.2.jar -O openapi-generator-cli.jar
  displayName: 'OpenAPI Codegen install'

# show code generation options
- script: |
    echo "Java Options"
    java -jar openapi-generator-cli.jar config-help -g spring
    echo "dart options"
    java -jar openapi-generator-cli.jar config-help -g dart
    echo "typescript-angular options"
    java -jar openapi-generator-cli.jar config-help -g typescript-angular
  displayName: 'Show OpenAPI Codegen options'

# create directories for generated code
- script: |
    mkdir generated/
    mkdir generated/spring/
    mkdir generated/dart/
  displayName: 'create directories for generated code'

# generate java spring code
- script: |
    java -jar openapi-generator-cli.jar generate \
      -i api/swagger.json \
      -g spring \
      -o generated/spring/
    cd generated/spring/
    tar -czf spring.tar.gz *
    cd ../..
  displayName: 'spring OpenAPI Codegen '

# generate angular code
- script: |
    java -jar openapi-generator-cli.jar generate \
      -i api/swagger.json \
      -g typescript-angular \
      -o generated/angular/
    cd generated/typescript-angular/
    tar -czf typescript-angular.tar.gz *
    cd ../..
  displayName: 'typescript-angular OpenAPI Codegen '

# generate dart client code
- script: |
    java -jar openapi-generator-cli.jar generate \
      -i api/swagger.json \
      -g dart \
      -o generated/dart/ \
      -c api/dart-config.json
  displayName: 'dart OpenAPI Codegen'

# prepare dart code for publishing
- script: |
    cd generated/dart/
    export PATH="$PATH":"$HOME/.pub-cache/bin"
    export PATH="$PATH":/usr/lib/dart/bin/
    wget -O LICENSE https://spdx.org/licenses/LGPL-2.0-only.html#licenseText
    echo "authors:" >> pubspec.yaml
    echo "  - Benjamin Schilling <benjamin.a.schilling@freenet.de>" >> pubspec.yaml 
    echo "homepage: https://github.com/openrqm/openrqm-docs " >> pubspec.yaml
    mv docs doc
    tar -czf dart.tar.gz *
    cd ../..
  displayName: 'create dart archive'

# Install tools required to convert markdown to PDF
- script: |
    sudo apt-get install pandoc texlive
    npm install -g pandoc-plantuml
  displayName: 'install required tools'

# Convert the README
- script: |
    pandoc -s --columns=80 -F pandoc-plantuml -o ARCHITECTURE.pdf arch/ARCHITECTURE.md
  displayName: 'pandoc convert'

- script: |
    echo '##vso[task.setvariable variable=releasetag]release'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  displayName: 'Set Release Tag if master branch'

- script: |
    echo '##vso[task.setvariable variable=releasetag]latest'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
  displayName: 'Set Release Tag if development branch'

- task: GithubRelease@0 
  condition: or(and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')), and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development')))
  displayName: 'Create GitHub Release'      
  inputs:
    gitHubConnection: benjaminSchilling33
    repositoryName: openrqm/openrqm-docs
    action: edit
    tagSource: manual
    tag: $(releasetag) 
    assetUploadMode: replace
    assets: |
        $(Build.Repository.LocalPath)/ARCHITECTURE.pdf
        $(Build.Repository.LocalPath)/generated/spring/spring.tar.gz
        $(Build.Repository.LocalPath)/generated/dart/dart.tar.gz
        $(Build.Repository.LocalPath)/generated/typescript-angular/typescript-angular.tar.gz