# OpenRQM Docs
# Installs node.js and the required tools to generate PDFs from the Markdown documentation.
# Downloads the swagger codegen and generates the spring boot server and dart client stubs

trigger:
- master
- development

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

# install & prepare the Dart SDK for publishing to pub
- script: |
    sudo apt-get update
    sudo apt-get install apt-transport-https
    sudo sh -c 'curl https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -'
    sudo sh -c 'curl https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list > /etc/apt/sources.list.d/dart_stable.list'
    sudo apt-get update
    sudo apt-get install dart
  displayName: 'Prepare Dart SDK'

# install the swagger-codegen, generate the java spring code and archive it, generate the dart code and publish it to pub
- script: |
    wget http://central.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.8/swagger-codegen-cli-2.4.8.jar -O swagger-codegen-cli.jar
    echo "Java Options"
    java -jar swagger-codegen-cli.jar config-help -l spring
    echo "dart options"
    java -jar swagger-codegen-cli.jar config-help -l dart
    mkdir generated/
    mkdir generated/spring/
    mkdir generated/dart/
    java -jar swagger-codegen-cli.jar generate \
      -i api/swagger.json \
      -l spring \
      -o generated/spring/
    cd generated/spring/
    tar -czf spring.tar.gz *
    cd ../..
    java -jar swagger-codegen-cli.jar generate \
      -i api/swagger.json \
      -l dart \
      -o generated/dart/ \
      -c api/dart-config.json
    cd generated/dart/
    export PATH="$PATH":"$HOME/.pub-cache/bin"
    export PATH="$PATH":/usr/lib/dart/bin/
    wget -O LICENSE https://spdx.org/licenses/LGPL-2.0-only.html#licenseText
    echo "### printing pubspec###"
    cat pubspec.yml
    echo "authors: Benjamin Schilling <benjamin.a.schilling@freenet.de>" >> pubspec.yml 
    echo "homepage: https://github.com/openrqm/openrqm-docs " >> pubspec.yml 
    echo "environment:" >> pubspec.yml 
    echo "  sdk: \'>=2.0.0 <3.0.0\'" >> pubspec.yml 
    echo "### printing pubspec###"
    cat pubspec.yml
    pub publish --dry-run
    cd ../..
  displayName: 'Swagger Codegen & publish'

# Install tools required to convert markdown to PDF
- script: |
    sudo apt-get install pandoc texlive
    npm install -g pandoc-plantuml
  displayName: 'install required tools'

# Convert the README
- script: |
    pandoc -F pandoc-plantuml -o ARCHITECTURE.pdf arch/ARCHITECTURE.md
  displayName: 'pandoc convert'

- script: |
    echo '##vso[task.setvariable variable=releasetag]release'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  displayName: 'Set Release Tag if master branch'

- script: |
    echo '##vso[task.setvariable variable=releasetag]latest'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/development')
  displayName: 'Set Release Tag if development branch'

- task: GithubRelease@0 
  condition: or(and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')), and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/development')))
  displayName: 'Create GitHub Release'      
  inputs:
    gitHubConnection: benjaminSchilling33
    repositoryName: openrqm/openrqm-docs
    action: edit
    tagSource: manual
    tag: $(releasetag) 
    assetUploadMode: replace
    assets: |
        $(Build.Repository.LocalPath)/ARCHITECTURE.pdf
        $(Build.Repository.LocalPath)/generated/spring/spring.tar.gz